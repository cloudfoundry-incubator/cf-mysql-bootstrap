// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/cf-mysql-bootstrap/bootstrapper/node_manager"
)

type FakeNodeManager struct {
	VerifyClusterIsUnhealthyStub        func() (bool, error)
	verifyClusterIsUnhealthyMutex       sync.RWMutex
	verifyClusterIsUnhealthyArgsForCall []struct{}
	verifyClusterIsUnhealthyReturns     struct {
		result1 bool
		result2 error
	}
	VerifyAllNodesAreReachableStub        func() error
	verifyAllNodesAreReachableMutex       sync.RWMutex
	verifyAllNodesAreReachableArgsForCall []struct{}
	verifyAllNodesAreReachableReturns     struct {
		result1 error
	}
	StopAllNodesStub        func() error
	stopAllNodesMutex       sync.RWMutex
	stopAllNodesArgsForCall []struct{}
	stopAllNodesReturns     struct {
		result1 error
	}
	GetSequenceNumbersStub        func() (map[string]int, error)
	getSequenceNumbersMutex       sync.RWMutex
	getSequenceNumbersArgsForCall []struct{}
	getSequenceNumbersReturns     struct {
		result1 map[string]int
		result2 error
	}
	BootstrapNodeStub        func(baseURL string) error
	bootstrapNodeMutex       sync.RWMutex
	bootstrapNodeArgsForCall []struct {
		baseURL string
	}
	bootstrapNodeReturns struct {
		result1 error
	}
	JoinNodeStub        func(baseURL string) error
	joinNodeMutex       sync.RWMutex
	joinNodeArgsForCall []struct {
		baseURL string
	}
	joinNodeReturns struct {
		result1 error
	}
	FindUnhealthyNodeStub        func() (string, error)
	findUnhealthyNodeMutex       sync.RWMutex
	findUnhealthyNodeArgsForCall []struct{}
	findUnhealthyNodeReturns     struct {
		result1 string
		result2 error
	}
	StopNodeStub        func(string) error
	stopNodeMutex       sync.RWMutex
	stopNodeArgsForCall []struct {
		arg1 string
	}
	stopNodeReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNodeManager) VerifyClusterIsUnhealthy() (bool, error) {
	fake.verifyClusterIsUnhealthyMutex.Lock()
	fake.verifyClusterIsUnhealthyArgsForCall = append(fake.verifyClusterIsUnhealthyArgsForCall, struct{}{})
	fake.recordInvocation("VerifyClusterIsUnhealthy", []interface{}{})
	fake.verifyClusterIsUnhealthyMutex.Unlock()
	if fake.VerifyClusterIsUnhealthyStub != nil {
		return fake.VerifyClusterIsUnhealthyStub()
	}
	return fake.verifyClusterIsUnhealthyReturns.result1, fake.verifyClusterIsUnhealthyReturns.result2
}

func (fake *FakeNodeManager) VerifyClusterIsUnhealthyCallCount() int {
	fake.verifyClusterIsUnhealthyMutex.RLock()
	defer fake.verifyClusterIsUnhealthyMutex.RUnlock()
	return len(fake.verifyClusterIsUnhealthyArgsForCall)
}

func (fake *FakeNodeManager) VerifyClusterIsUnhealthyReturns(result1 bool, result2 error) {
	fake.VerifyClusterIsUnhealthyStub = nil
	fake.verifyClusterIsUnhealthyReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeNodeManager) VerifyAllNodesAreReachable() error {
	fake.verifyAllNodesAreReachableMutex.Lock()
	fake.verifyAllNodesAreReachableArgsForCall = append(fake.verifyAllNodesAreReachableArgsForCall, struct{}{})
	fake.recordInvocation("VerifyAllNodesAreReachable", []interface{}{})
	fake.verifyAllNodesAreReachableMutex.Unlock()
	if fake.VerifyAllNodesAreReachableStub != nil {
		return fake.VerifyAllNodesAreReachableStub()
	}
	return fake.verifyAllNodesAreReachableReturns.result1
}

func (fake *FakeNodeManager) VerifyAllNodesAreReachableCallCount() int {
	fake.verifyAllNodesAreReachableMutex.RLock()
	defer fake.verifyAllNodesAreReachableMutex.RUnlock()
	return len(fake.verifyAllNodesAreReachableArgsForCall)
}

func (fake *FakeNodeManager) VerifyAllNodesAreReachableReturns(result1 error) {
	fake.VerifyAllNodesAreReachableStub = nil
	fake.verifyAllNodesAreReachableReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNodeManager) StopAllNodes() error {
	fake.stopAllNodesMutex.Lock()
	fake.stopAllNodesArgsForCall = append(fake.stopAllNodesArgsForCall, struct{}{})
	fake.recordInvocation("StopAllNodes", []interface{}{})
	fake.stopAllNodesMutex.Unlock()
	if fake.StopAllNodesStub != nil {
		return fake.StopAllNodesStub()
	}
	return fake.stopAllNodesReturns.result1
}

func (fake *FakeNodeManager) StopAllNodesCallCount() int {
	fake.stopAllNodesMutex.RLock()
	defer fake.stopAllNodesMutex.RUnlock()
	return len(fake.stopAllNodesArgsForCall)
}

func (fake *FakeNodeManager) StopAllNodesReturns(result1 error) {
	fake.StopAllNodesStub = nil
	fake.stopAllNodesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNodeManager) GetSequenceNumbers() (map[string]int, error) {
	fake.getSequenceNumbersMutex.Lock()
	fake.getSequenceNumbersArgsForCall = append(fake.getSequenceNumbersArgsForCall, struct{}{})
	fake.recordInvocation("GetSequenceNumbers", []interface{}{})
	fake.getSequenceNumbersMutex.Unlock()
	if fake.GetSequenceNumbersStub != nil {
		return fake.GetSequenceNumbersStub()
	}
	return fake.getSequenceNumbersReturns.result1, fake.getSequenceNumbersReturns.result2
}

func (fake *FakeNodeManager) GetSequenceNumbersCallCount() int {
	fake.getSequenceNumbersMutex.RLock()
	defer fake.getSequenceNumbersMutex.RUnlock()
	return len(fake.getSequenceNumbersArgsForCall)
}

func (fake *FakeNodeManager) GetSequenceNumbersReturns(result1 map[string]int, result2 error) {
	fake.GetSequenceNumbersStub = nil
	fake.getSequenceNumbersReturns = struct {
		result1 map[string]int
		result2 error
	}{result1, result2}
}

func (fake *FakeNodeManager) BootstrapNode(baseURL string) error {
	fake.bootstrapNodeMutex.Lock()
	fake.bootstrapNodeArgsForCall = append(fake.bootstrapNodeArgsForCall, struct {
		baseURL string
	}{baseURL})
	fake.recordInvocation("BootstrapNode", []interface{}{baseURL})
	fake.bootstrapNodeMutex.Unlock()
	if fake.BootstrapNodeStub != nil {
		return fake.BootstrapNodeStub(baseURL)
	}
	return fake.bootstrapNodeReturns.result1
}

func (fake *FakeNodeManager) BootstrapNodeCallCount() int {
	fake.bootstrapNodeMutex.RLock()
	defer fake.bootstrapNodeMutex.RUnlock()
	return len(fake.bootstrapNodeArgsForCall)
}

func (fake *FakeNodeManager) BootstrapNodeArgsForCall(i int) string {
	fake.bootstrapNodeMutex.RLock()
	defer fake.bootstrapNodeMutex.RUnlock()
	return fake.bootstrapNodeArgsForCall[i].baseURL
}

func (fake *FakeNodeManager) BootstrapNodeReturns(result1 error) {
	fake.BootstrapNodeStub = nil
	fake.bootstrapNodeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNodeManager) JoinNode(baseURL string) error {
	fake.joinNodeMutex.Lock()
	fake.joinNodeArgsForCall = append(fake.joinNodeArgsForCall, struct {
		baseURL string
	}{baseURL})
	fake.recordInvocation("JoinNode", []interface{}{baseURL})
	fake.joinNodeMutex.Unlock()
	if fake.JoinNodeStub != nil {
		return fake.JoinNodeStub(baseURL)
	}
	return fake.joinNodeReturns.result1
}

func (fake *FakeNodeManager) JoinNodeCallCount() int {
	fake.joinNodeMutex.RLock()
	defer fake.joinNodeMutex.RUnlock()
	return len(fake.joinNodeArgsForCall)
}

func (fake *FakeNodeManager) JoinNodeArgsForCall(i int) string {
	fake.joinNodeMutex.RLock()
	defer fake.joinNodeMutex.RUnlock()
	return fake.joinNodeArgsForCall[i].baseURL
}

func (fake *FakeNodeManager) JoinNodeReturns(result1 error) {
	fake.JoinNodeStub = nil
	fake.joinNodeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNodeManager) FindUnhealthyNode() (string, error) {
	fake.findUnhealthyNodeMutex.Lock()
	fake.findUnhealthyNodeArgsForCall = append(fake.findUnhealthyNodeArgsForCall, struct{}{})
	fake.recordInvocation("FindUnhealthyNode", []interface{}{})
	fake.findUnhealthyNodeMutex.Unlock()
	if fake.FindUnhealthyNodeStub != nil {
		return fake.FindUnhealthyNodeStub()
	}
	return fake.findUnhealthyNodeReturns.result1, fake.findUnhealthyNodeReturns.result2
}

func (fake *FakeNodeManager) FindUnhealthyNodeCallCount() int {
	fake.findUnhealthyNodeMutex.RLock()
	defer fake.findUnhealthyNodeMutex.RUnlock()
	return len(fake.findUnhealthyNodeArgsForCall)
}

func (fake *FakeNodeManager) FindUnhealthyNodeReturns(result1 string, result2 error) {
	fake.FindUnhealthyNodeStub = nil
	fake.findUnhealthyNodeReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeNodeManager) StopNode(arg1 string) error {
	fake.stopNodeMutex.Lock()
	fake.stopNodeArgsForCall = append(fake.stopNodeArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("StopNode", []interface{}{arg1})
	fake.stopNodeMutex.Unlock()
	if fake.StopNodeStub != nil {
		return fake.StopNodeStub(arg1)
	}
	return fake.stopNodeReturns.result1
}

func (fake *FakeNodeManager) StopNodeCallCount() int {
	fake.stopNodeMutex.RLock()
	defer fake.stopNodeMutex.RUnlock()
	return len(fake.stopNodeArgsForCall)
}

func (fake *FakeNodeManager) StopNodeArgsForCall(i int) string {
	fake.stopNodeMutex.RLock()
	defer fake.stopNodeMutex.RUnlock()
	return fake.stopNodeArgsForCall[i].arg1
}

func (fake *FakeNodeManager) StopNodeReturns(result1 error) {
	fake.StopNodeStub = nil
	fake.stopNodeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNodeManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.verifyClusterIsUnhealthyMutex.RLock()
	defer fake.verifyClusterIsUnhealthyMutex.RUnlock()
	fake.verifyAllNodesAreReachableMutex.RLock()
	defer fake.verifyAllNodesAreReachableMutex.RUnlock()
	fake.stopAllNodesMutex.RLock()
	defer fake.stopAllNodesMutex.RUnlock()
	fake.getSequenceNumbersMutex.RLock()
	defer fake.getSequenceNumbersMutex.RUnlock()
	fake.bootstrapNodeMutex.RLock()
	defer fake.bootstrapNodeMutex.RUnlock()
	fake.joinNodeMutex.RLock()
	defer fake.joinNodeMutex.RUnlock()
	fake.findUnhealthyNodeMutex.RLock()
	defer fake.findUnhealthyNodeMutex.RUnlock()
	fake.stopNodeMutex.RLock()
	defer fake.stopNodeMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeNodeManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ node_manager.NodeManager = new(FakeNodeManager)
