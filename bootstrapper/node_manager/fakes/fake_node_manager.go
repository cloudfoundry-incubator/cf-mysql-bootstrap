// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/cf-mysql-bootstrap/bootstrapper/node_manager"
)

type FakeNodeManager struct {
	BootstrapNodeStub        func(string) error
	bootstrapNodeMutex       sync.RWMutex
	bootstrapNodeArgsForCall []struct {
		arg1 string
	}
	bootstrapNodeReturns struct {
		result1 error
	}
	bootstrapNodeReturnsOnCall map[int]struct {
		result1 error
	}
	FindUnhealthyNodeStub        func() (string, error)
	findUnhealthyNodeMutex       sync.RWMutex
	findUnhealthyNodeArgsForCall []struct {
	}
	findUnhealthyNodeReturns struct {
		result1 string
		result2 error
	}
	findUnhealthyNodeReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetSequenceNumbersStub        func() (map[string]int, error)
	getSequenceNumbersMutex       sync.RWMutex
	getSequenceNumbersArgsForCall []struct {
	}
	getSequenceNumbersReturns struct {
		result1 map[string]int
		result2 error
	}
	getSequenceNumbersReturnsOnCall map[int]struct {
		result1 map[string]int
		result2 error
	}
	JoinNodeStub        func(string) error
	joinNodeMutex       sync.RWMutex
	joinNodeArgsForCall []struct {
		arg1 string
	}
	joinNodeReturns struct {
		result1 error
	}
	joinNodeReturnsOnCall map[int]struct {
		result1 error
	}
	StopAllNodesStub        func() error
	stopAllNodesMutex       sync.RWMutex
	stopAllNodesArgsForCall []struct {
	}
	stopAllNodesReturns struct {
		result1 error
	}
	stopAllNodesReturnsOnCall map[int]struct {
		result1 error
	}
	StopNodeStub        func(string) error
	stopNodeMutex       sync.RWMutex
	stopNodeArgsForCall []struct {
		arg1 string
	}
	stopNodeReturns struct {
		result1 error
	}
	stopNodeReturnsOnCall map[int]struct {
		result1 error
	}
	VerifyAllNodesAreReachableStub        func() error
	verifyAllNodesAreReachableMutex       sync.RWMutex
	verifyAllNodesAreReachableArgsForCall []struct {
	}
	verifyAllNodesAreReachableReturns struct {
		result1 error
	}
	verifyAllNodesAreReachableReturnsOnCall map[int]struct {
		result1 error
	}
	VerifyClusterIsUnhealthyStub        func() (bool, error)
	verifyClusterIsUnhealthyMutex       sync.RWMutex
	verifyClusterIsUnhealthyArgsForCall []struct {
	}
	verifyClusterIsUnhealthyReturns struct {
		result1 bool
		result2 error
	}
	verifyClusterIsUnhealthyReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNodeManager) BootstrapNode(arg1 string) error {
	fake.bootstrapNodeMutex.Lock()
	ret, specificReturn := fake.bootstrapNodeReturnsOnCall[len(fake.bootstrapNodeArgsForCall)]
	fake.bootstrapNodeArgsForCall = append(fake.bootstrapNodeArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("BootstrapNode", []interface{}{arg1})
	fake.bootstrapNodeMutex.Unlock()
	if fake.BootstrapNodeStub != nil {
		return fake.BootstrapNodeStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.bootstrapNodeReturns
	return fakeReturns.result1
}

func (fake *FakeNodeManager) BootstrapNodeCallCount() int {
	fake.bootstrapNodeMutex.RLock()
	defer fake.bootstrapNodeMutex.RUnlock()
	return len(fake.bootstrapNodeArgsForCall)
}

func (fake *FakeNodeManager) BootstrapNodeCalls(stub func(string) error) {
	fake.bootstrapNodeMutex.Lock()
	defer fake.bootstrapNodeMutex.Unlock()
	fake.BootstrapNodeStub = stub
}

func (fake *FakeNodeManager) BootstrapNodeArgsForCall(i int) string {
	fake.bootstrapNodeMutex.RLock()
	defer fake.bootstrapNodeMutex.RUnlock()
	argsForCall := fake.bootstrapNodeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNodeManager) BootstrapNodeReturns(result1 error) {
	fake.bootstrapNodeMutex.Lock()
	defer fake.bootstrapNodeMutex.Unlock()
	fake.BootstrapNodeStub = nil
	fake.bootstrapNodeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNodeManager) BootstrapNodeReturnsOnCall(i int, result1 error) {
	fake.bootstrapNodeMutex.Lock()
	defer fake.bootstrapNodeMutex.Unlock()
	fake.BootstrapNodeStub = nil
	if fake.bootstrapNodeReturnsOnCall == nil {
		fake.bootstrapNodeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.bootstrapNodeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeNodeManager) FindUnhealthyNode() (string, error) {
	fake.findUnhealthyNodeMutex.Lock()
	ret, specificReturn := fake.findUnhealthyNodeReturnsOnCall[len(fake.findUnhealthyNodeArgsForCall)]
	fake.findUnhealthyNodeArgsForCall = append(fake.findUnhealthyNodeArgsForCall, struct {
	}{})
	fake.recordInvocation("FindUnhealthyNode", []interface{}{})
	fake.findUnhealthyNodeMutex.Unlock()
	if fake.FindUnhealthyNodeStub != nil {
		return fake.FindUnhealthyNodeStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.findUnhealthyNodeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNodeManager) FindUnhealthyNodeCallCount() int {
	fake.findUnhealthyNodeMutex.RLock()
	defer fake.findUnhealthyNodeMutex.RUnlock()
	return len(fake.findUnhealthyNodeArgsForCall)
}

func (fake *FakeNodeManager) FindUnhealthyNodeCalls(stub func() (string, error)) {
	fake.findUnhealthyNodeMutex.Lock()
	defer fake.findUnhealthyNodeMutex.Unlock()
	fake.FindUnhealthyNodeStub = stub
}

func (fake *FakeNodeManager) FindUnhealthyNodeReturns(result1 string, result2 error) {
	fake.findUnhealthyNodeMutex.Lock()
	defer fake.findUnhealthyNodeMutex.Unlock()
	fake.FindUnhealthyNodeStub = nil
	fake.findUnhealthyNodeReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeNodeManager) FindUnhealthyNodeReturnsOnCall(i int, result1 string, result2 error) {
	fake.findUnhealthyNodeMutex.Lock()
	defer fake.findUnhealthyNodeMutex.Unlock()
	fake.FindUnhealthyNodeStub = nil
	if fake.findUnhealthyNodeReturnsOnCall == nil {
		fake.findUnhealthyNodeReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.findUnhealthyNodeReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeNodeManager) GetSequenceNumbers() (map[string]int, error) {
	fake.getSequenceNumbersMutex.Lock()
	ret, specificReturn := fake.getSequenceNumbersReturnsOnCall[len(fake.getSequenceNumbersArgsForCall)]
	fake.getSequenceNumbersArgsForCall = append(fake.getSequenceNumbersArgsForCall, struct {
	}{})
	fake.recordInvocation("GetSequenceNumbers", []interface{}{})
	fake.getSequenceNumbersMutex.Unlock()
	if fake.GetSequenceNumbersStub != nil {
		return fake.GetSequenceNumbersStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getSequenceNumbersReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNodeManager) GetSequenceNumbersCallCount() int {
	fake.getSequenceNumbersMutex.RLock()
	defer fake.getSequenceNumbersMutex.RUnlock()
	return len(fake.getSequenceNumbersArgsForCall)
}

func (fake *FakeNodeManager) GetSequenceNumbersCalls(stub func() (map[string]int, error)) {
	fake.getSequenceNumbersMutex.Lock()
	defer fake.getSequenceNumbersMutex.Unlock()
	fake.GetSequenceNumbersStub = stub
}

func (fake *FakeNodeManager) GetSequenceNumbersReturns(result1 map[string]int, result2 error) {
	fake.getSequenceNumbersMutex.Lock()
	defer fake.getSequenceNumbersMutex.Unlock()
	fake.GetSequenceNumbersStub = nil
	fake.getSequenceNumbersReturns = struct {
		result1 map[string]int
		result2 error
	}{result1, result2}
}

func (fake *FakeNodeManager) GetSequenceNumbersReturnsOnCall(i int, result1 map[string]int, result2 error) {
	fake.getSequenceNumbersMutex.Lock()
	defer fake.getSequenceNumbersMutex.Unlock()
	fake.GetSequenceNumbersStub = nil
	if fake.getSequenceNumbersReturnsOnCall == nil {
		fake.getSequenceNumbersReturnsOnCall = make(map[int]struct {
			result1 map[string]int
			result2 error
		})
	}
	fake.getSequenceNumbersReturnsOnCall[i] = struct {
		result1 map[string]int
		result2 error
	}{result1, result2}
}

func (fake *FakeNodeManager) JoinNode(arg1 string) error {
	fake.joinNodeMutex.Lock()
	ret, specificReturn := fake.joinNodeReturnsOnCall[len(fake.joinNodeArgsForCall)]
	fake.joinNodeArgsForCall = append(fake.joinNodeArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("JoinNode", []interface{}{arg1})
	fake.joinNodeMutex.Unlock()
	if fake.JoinNodeStub != nil {
		return fake.JoinNodeStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.joinNodeReturns
	return fakeReturns.result1
}

func (fake *FakeNodeManager) JoinNodeCallCount() int {
	fake.joinNodeMutex.RLock()
	defer fake.joinNodeMutex.RUnlock()
	return len(fake.joinNodeArgsForCall)
}

func (fake *FakeNodeManager) JoinNodeCalls(stub func(string) error) {
	fake.joinNodeMutex.Lock()
	defer fake.joinNodeMutex.Unlock()
	fake.JoinNodeStub = stub
}

func (fake *FakeNodeManager) JoinNodeArgsForCall(i int) string {
	fake.joinNodeMutex.RLock()
	defer fake.joinNodeMutex.RUnlock()
	argsForCall := fake.joinNodeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNodeManager) JoinNodeReturns(result1 error) {
	fake.joinNodeMutex.Lock()
	defer fake.joinNodeMutex.Unlock()
	fake.JoinNodeStub = nil
	fake.joinNodeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNodeManager) JoinNodeReturnsOnCall(i int, result1 error) {
	fake.joinNodeMutex.Lock()
	defer fake.joinNodeMutex.Unlock()
	fake.JoinNodeStub = nil
	if fake.joinNodeReturnsOnCall == nil {
		fake.joinNodeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.joinNodeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeNodeManager) StopAllNodes() error {
	fake.stopAllNodesMutex.Lock()
	ret, specificReturn := fake.stopAllNodesReturnsOnCall[len(fake.stopAllNodesArgsForCall)]
	fake.stopAllNodesArgsForCall = append(fake.stopAllNodesArgsForCall, struct {
	}{})
	fake.recordInvocation("StopAllNodes", []interface{}{})
	fake.stopAllNodesMutex.Unlock()
	if fake.StopAllNodesStub != nil {
		return fake.StopAllNodesStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.stopAllNodesReturns
	return fakeReturns.result1
}

func (fake *FakeNodeManager) StopAllNodesCallCount() int {
	fake.stopAllNodesMutex.RLock()
	defer fake.stopAllNodesMutex.RUnlock()
	return len(fake.stopAllNodesArgsForCall)
}

func (fake *FakeNodeManager) StopAllNodesCalls(stub func() error) {
	fake.stopAllNodesMutex.Lock()
	defer fake.stopAllNodesMutex.Unlock()
	fake.StopAllNodesStub = stub
}

func (fake *FakeNodeManager) StopAllNodesReturns(result1 error) {
	fake.stopAllNodesMutex.Lock()
	defer fake.stopAllNodesMutex.Unlock()
	fake.StopAllNodesStub = nil
	fake.stopAllNodesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNodeManager) StopAllNodesReturnsOnCall(i int, result1 error) {
	fake.stopAllNodesMutex.Lock()
	defer fake.stopAllNodesMutex.Unlock()
	fake.StopAllNodesStub = nil
	if fake.stopAllNodesReturnsOnCall == nil {
		fake.stopAllNodesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.stopAllNodesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeNodeManager) StopNode(arg1 string) error {
	fake.stopNodeMutex.Lock()
	ret, specificReturn := fake.stopNodeReturnsOnCall[len(fake.stopNodeArgsForCall)]
	fake.stopNodeArgsForCall = append(fake.stopNodeArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("StopNode", []interface{}{arg1})
	fake.stopNodeMutex.Unlock()
	if fake.StopNodeStub != nil {
		return fake.StopNodeStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.stopNodeReturns
	return fakeReturns.result1
}

func (fake *FakeNodeManager) StopNodeCallCount() int {
	fake.stopNodeMutex.RLock()
	defer fake.stopNodeMutex.RUnlock()
	return len(fake.stopNodeArgsForCall)
}

func (fake *FakeNodeManager) StopNodeCalls(stub func(string) error) {
	fake.stopNodeMutex.Lock()
	defer fake.stopNodeMutex.Unlock()
	fake.StopNodeStub = stub
}

func (fake *FakeNodeManager) StopNodeArgsForCall(i int) string {
	fake.stopNodeMutex.RLock()
	defer fake.stopNodeMutex.RUnlock()
	argsForCall := fake.stopNodeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNodeManager) StopNodeReturns(result1 error) {
	fake.stopNodeMutex.Lock()
	defer fake.stopNodeMutex.Unlock()
	fake.StopNodeStub = nil
	fake.stopNodeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNodeManager) StopNodeReturnsOnCall(i int, result1 error) {
	fake.stopNodeMutex.Lock()
	defer fake.stopNodeMutex.Unlock()
	fake.StopNodeStub = nil
	if fake.stopNodeReturnsOnCall == nil {
		fake.stopNodeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.stopNodeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeNodeManager) VerifyAllNodesAreReachable() error {
	fake.verifyAllNodesAreReachableMutex.Lock()
	ret, specificReturn := fake.verifyAllNodesAreReachableReturnsOnCall[len(fake.verifyAllNodesAreReachableArgsForCall)]
	fake.verifyAllNodesAreReachableArgsForCall = append(fake.verifyAllNodesAreReachableArgsForCall, struct {
	}{})
	fake.recordInvocation("VerifyAllNodesAreReachable", []interface{}{})
	fake.verifyAllNodesAreReachableMutex.Unlock()
	if fake.VerifyAllNodesAreReachableStub != nil {
		return fake.VerifyAllNodesAreReachableStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.verifyAllNodesAreReachableReturns
	return fakeReturns.result1
}

func (fake *FakeNodeManager) VerifyAllNodesAreReachableCallCount() int {
	fake.verifyAllNodesAreReachableMutex.RLock()
	defer fake.verifyAllNodesAreReachableMutex.RUnlock()
	return len(fake.verifyAllNodesAreReachableArgsForCall)
}

func (fake *FakeNodeManager) VerifyAllNodesAreReachableCalls(stub func() error) {
	fake.verifyAllNodesAreReachableMutex.Lock()
	defer fake.verifyAllNodesAreReachableMutex.Unlock()
	fake.VerifyAllNodesAreReachableStub = stub
}

func (fake *FakeNodeManager) VerifyAllNodesAreReachableReturns(result1 error) {
	fake.verifyAllNodesAreReachableMutex.Lock()
	defer fake.verifyAllNodesAreReachableMutex.Unlock()
	fake.VerifyAllNodesAreReachableStub = nil
	fake.verifyAllNodesAreReachableReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeNodeManager) VerifyAllNodesAreReachableReturnsOnCall(i int, result1 error) {
	fake.verifyAllNodesAreReachableMutex.Lock()
	defer fake.verifyAllNodesAreReachableMutex.Unlock()
	fake.VerifyAllNodesAreReachableStub = nil
	if fake.verifyAllNodesAreReachableReturnsOnCall == nil {
		fake.verifyAllNodesAreReachableReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.verifyAllNodesAreReachableReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeNodeManager) VerifyClusterIsUnhealthy() (bool, error) {
	fake.verifyClusterIsUnhealthyMutex.Lock()
	ret, specificReturn := fake.verifyClusterIsUnhealthyReturnsOnCall[len(fake.verifyClusterIsUnhealthyArgsForCall)]
	fake.verifyClusterIsUnhealthyArgsForCall = append(fake.verifyClusterIsUnhealthyArgsForCall, struct {
	}{})
	fake.recordInvocation("VerifyClusterIsUnhealthy", []interface{}{})
	fake.verifyClusterIsUnhealthyMutex.Unlock()
	if fake.VerifyClusterIsUnhealthyStub != nil {
		return fake.VerifyClusterIsUnhealthyStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.verifyClusterIsUnhealthyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNodeManager) VerifyClusterIsUnhealthyCallCount() int {
	fake.verifyClusterIsUnhealthyMutex.RLock()
	defer fake.verifyClusterIsUnhealthyMutex.RUnlock()
	return len(fake.verifyClusterIsUnhealthyArgsForCall)
}

func (fake *FakeNodeManager) VerifyClusterIsUnhealthyCalls(stub func() (bool, error)) {
	fake.verifyClusterIsUnhealthyMutex.Lock()
	defer fake.verifyClusterIsUnhealthyMutex.Unlock()
	fake.VerifyClusterIsUnhealthyStub = stub
}

func (fake *FakeNodeManager) VerifyClusterIsUnhealthyReturns(result1 bool, result2 error) {
	fake.verifyClusterIsUnhealthyMutex.Lock()
	defer fake.verifyClusterIsUnhealthyMutex.Unlock()
	fake.VerifyClusterIsUnhealthyStub = nil
	fake.verifyClusterIsUnhealthyReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeNodeManager) VerifyClusterIsUnhealthyReturnsOnCall(i int, result1 bool, result2 error) {
	fake.verifyClusterIsUnhealthyMutex.Lock()
	defer fake.verifyClusterIsUnhealthyMutex.Unlock()
	fake.VerifyClusterIsUnhealthyStub = nil
	if fake.verifyClusterIsUnhealthyReturnsOnCall == nil {
		fake.verifyClusterIsUnhealthyReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.verifyClusterIsUnhealthyReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeNodeManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.bootstrapNodeMutex.RLock()
	defer fake.bootstrapNodeMutex.RUnlock()
	fake.findUnhealthyNodeMutex.RLock()
	defer fake.findUnhealthyNodeMutex.RUnlock()
	fake.getSequenceNumbersMutex.RLock()
	defer fake.getSequenceNumbersMutex.RUnlock()
	fake.joinNodeMutex.RLock()
	defer fake.joinNodeMutex.RUnlock()
	fake.stopAllNodesMutex.RLock()
	defer fake.stopAllNodesMutex.RUnlock()
	fake.stopNodeMutex.RLock()
	defer fake.stopNodeMutex.RUnlock()
	fake.verifyAllNodesAreReachableMutex.RLock()
	defer fake.verifyAllNodesAreReachableMutex.RUnlock()
	fake.verifyClusterIsUnhealthyMutex.RLock()
	defer fake.verifyClusterIsUnhealthyMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeNodeManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ node_manager.NodeManager = new(FakeNodeManager)
